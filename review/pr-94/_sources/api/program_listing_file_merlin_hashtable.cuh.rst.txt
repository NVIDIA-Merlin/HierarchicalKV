
.. _program_listing_file_merlin_hashtable.cuh:

Program Listing for File merlin_hashtable.cuh
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_merlin_hashtable.cuh>` (``merlin_hashtable.cuh``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (c) 2022, NVIDIA CORPORATION.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #pragma once
   
   #include <thrust/device_vector.h>
   #include <thrust/execution_policy.h>
   #include <thrust/sort.h>
   #include <atomic>
   #include <cstdint>
   #include <limits>
   #include <mutex>
   #include <shared_mutex>
   #include <type_traits>
   #include "merlin/core_kernels.cuh"
   #include "merlin/flexible_buffer.cuh"
   #include "merlin/memory_pool.cuh"
   #include "merlin/types.cuh"
   #include "merlin/utils.cuh"
   
   namespace nv {
   namespace merlin {
   
   enum class EvictStrategy {
     kLru = 0,        
     kCustomized = 1  
   };
   
   struct HashTableOptions {
     size_t init_capacity = 0;        
     size_t max_capacity = 0;         
     size_t max_hbm_for_vectors = 0;  
     size_t max_bucket_size = 128;    
     size_t dim = 64;                 
     float max_load_factor = 0.5f;    
     int block_size = 128;            
     int io_block_size = 1024;        
     int device_id = 0;               
     bool io_by_cpu = false;  
     EvictStrategy evict_strategy = EvictStrategy::kLru;  
     bool use_constant_memory =
         true;  
     MemoryPoolOptions
         device_memory_pool;  
     MemoryPoolOptions
         host_memory_pool;  
   };
   
   template <class K, class M>
   using EraseIfPredict = bool (*)(
       const K& key,       
       M& meta,            
       const K& pattern,   
       const M& threshold  
   );
   
   template <class K, class V, class M = uint64_t>
   class HashTable {
    public:
     using size_type = size_t;
     using key_type = K;
     using value_type = V;
     using meta_type = M;
     using Pred = EraseIfPredict<key_type, meta_type>;
   
    private:
     using TableCore = nv::merlin::Table<key_type, value_type, meta_type>;
     static constexpr unsigned int TILE_SIZE = 4;
   
     using DeviceMemoryPool = MemoryPool<DeviceAllocator<char>>;
     using HostMemoryPool = MemoryPool<HostAllocator<char>>;
   
   #if THRUST_VERSION >= 101600
     static constexpr auto thrust_par = thrust::cuda::par_nosync;
   #else
     static constexpr auto thrust_par = thrust::cuda::par;
   #endif
   
    public:
     HashTable(){};
   
     ~HashTable() {
       if (initialized_) {
         CUDA_CHECK(cudaDeviceSynchronize());
   
         initialized_ = false;
         destroy_table<key_type, value_type, meta_type>(&table_);
         CUDA_CHECK(cudaFree(d_table_));
         release_constant_table<>(c_table_index_);
         dev_mem_pool_.reset();
         host_mem_pool_.reset();
       }
     }
   
    private:
     HashTable(const HashTable&) = delete;
     HashTable& operator=(const HashTable&) = delete;
     HashTable(HashTable&&) = delete;
     HashTable& operator=(HashTable&&) = delete;
   
    public:
     void init(const HashTableOptions options) {
       if (initialized_) {
         return;
       }
       options_ = options;
   
       // Construct table.
       cudaDeviceProp deviceProp;
       CUDA_CHECK(cudaSetDevice(options_.device_id));
       CUDA_CHECK(cudaGetDeviceProperties(&deviceProp, 0));
       shared_mem_size_ = deviceProp.sharedMemPerBlock;
       create_table<key_type, value_type, meta_type>(
           &table_, options_.dim, options_.init_capacity, options_.max_capacity,
           options_.max_hbm_for_vectors, options_.max_bucket_size);
       options_.block_size = SAFE_GET_BLOCK_SIZE(options_.block_size);
       reach_max_capacity_ = (options_.init_capacity * 2 > options_.max_capacity);
       MERLIN_CHECK((!(options_.io_by_cpu && options_.max_hbm_for_vectors != 0)),
                    "[HierarchicalKV] `io_by_cpu` should not be true when "
                    "`max_hbm_for_vectors` is not 0!");
       CUDA_CHECK(cudaMalloc((void**)&(d_table_), sizeof(TableCore)));
       if (options_.use_constant_memory && c_table_index_ == -1) {
         c_table_index_ = allocate_constant_table<>();
       }
       sync_table_configuration();
   
       // Create memory pools.
       dev_mem_pool_ = std::make_unique<MemoryPool<DeviceAllocator<char>>>(
           options_.device_memory_pool);
       host_mem_pool_ = std::make_unique<MemoryPool<HostAllocator<char>>>(
           options_.host_memory_pool);
   
       CUDA_CHECK(cudaDeviceSynchronize());
       initialized_ = true;
       CudaCheckError();
     }
   
     void insert_or_assign(const size_type n,
                           const key_type* keys,              // (n)
                           const value_type* values,          // (n, DIM)
                           const meta_type* metas = nullptr,  // (n)
                           cudaStream_t stream = 0,
                           bool ignore_evict_strategy = false) {
       if (n == 0) {
         return;
       }
   
       while (!reach_max_capacity_ &&
              fast_load_factor(n) > options_.max_load_factor) {
         reserve(capacity() * 2);
       }
   
       if (!ignore_evict_strategy) {
         check_evict_strategy(metas);
       }
   
       std::shared_lock<std::shared_timed_mutex> lock(mutex_, std::defer_lock);
       if (!reach_max_capacity_) {
         lock.lock();
       }
   
       if (is_fast_mode()) {
         using Selector =
             SelectUpsertKernelWithIO<key_type, value_type, meta_type>;
         static thread_local int step_counter = 0;
         static thread_local float load_factor = 0.0;
   
         if (((step_counter++) % kernel_select_interval_) == 0) {
           load_factor = fast_load_factor();
         }
   
         Selector::execute_kernel(
             load_factor, options_.block_size, stream, n, -1, d_table_, keys,
             reinterpret_cast<const value_type*>(values), metas);
       } else {
         const size_type dev_ws_size{n * (sizeof(value_type*) + sizeof(int))};
         auto dev_ws{dev_mem_pool_->get_workspace<1>(dev_ws_size, stream)};
         auto d_dst{dev_ws.get<value_type**>(0)};
         auto d_src_offset{reinterpret_cast<int*>(d_dst + n)};
   
         CUDA_CHECK(cudaMemsetAsync(d_dst, 0, dev_ws_size, stream));
   
         {
           const size_t block_size = options_.block_size;
           const size_t N = n * TILE_SIZE;
           const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
           upsert_kernel<key_type, value_type, meta_type, TILE_SIZE>
               <<<grid_size, block_size, 0, stream>>>(d_table_, keys, d_dst, metas,
                                                      d_src_offset, N);
         }
   
         {
           thrust::device_ptr<uintptr_t> d_dst_ptr(
               reinterpret_cast<uintptr_t*>(d_dst));
           thrust::device_ptr<int> d_src_offset_ptr(d_src_offset);
   
           thrust::sort_by_key(thrust_par.on(stream), d_dst_ptr, d_dst_ptr + n,
                               d_src_offset_ptr, thrust::less<uintptr_t>());
         }
   
         if (options_.io_by_cpu) {
           const size_type host_ws_size{dev_ws_size +
                                        n * sizeof(value_type) * dim()};
           auto host_ws{host_mem_pool_->get_workspace<1>(host_ws_size, stream)};
           auto h_dst{host_ws.get<value_type**>(0)};
           auto h_src_offset{reinterpret_cast<int*>(h_dst + n)};
           auto h_values{reinterpret_cast<value_type*>(h_src_offset + n)};
   
           CUDA_CHECK(cudaMemcpyAsync(h_dst, d_dst, dev_ws_size,
                                      cudaMemcpyDeviceToHost, stream));
           CUDA_CHECK(cudaMemcpyAsync(h_values, values, host_ws_size - dev_ws_size,
                                      cudaMemcpyDeviceToHost, stream));
           CUDA_CHECK(cudaStreamSynchronize(stream));
   
           write_by_cpu<value_type>(h_dst, h_values, h_src_offset, dim(), n);
         } else {
           const size_t block_size = options_.io_block_size;
           const size_t N = n * dim();
           const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
           write_kernel<key_type, value_type, meta_type>
               <<<grid_size, block_size, 0, stream>>>(values, d_dst, d_src_offset,
                                                      dim(), N);
         }
       }
   
       CudaCheckError();
     }
   
     void accum_or_assign(const size_type n,
                          const key_type* keys,               // (n)
                          const value_type* value_or_deltas,  // (n, DIM)
                          const bool* accum_or_assigns,       // (n)
                          const meta_type* metas = nullptr,   // (n)
                          cudaStream_t stream = 0,
                          bool ignore_evict_strategy = false) {
       if (n == 0) {
         return;
       }
   
       while (!reach_max_capacity_ &&
              fast_load_factor(n) > options_.max_load_factor) {
         reserve(capacity() * 2);
       }
   
       if (!ignore_evict_strategy) {
         check_evict_strategy(metas);
       }
   
       std::shared_lock<std::shared_timed_mutex> lock(mutex_, std::defer_lock);
       if (!reach_max_capacity_) {
         lock.lock();
       }
   
       const size_type dev_ws_size{
           n * (sizeof(value_type*) + sizeof(int) + sizeof(bool))};
       auto dev_ws{dev_mem_pool_->get_workspace<1>(dev_ws_size, stream)};
       auto dst{dev_ws.get<value_type**>(0)};
       auto src_offset{reinterpret_cast<int*>(dst + n)};
       auto founds{reinterpret_cast<bool*>(src_offset + n)};
   
       CUDA_CHECK(cudaMemsetAsync(dst, 0, dev_ws_size, stream));
   
       {
         const size_t block_size = options_.block_size;
         const size_t N = n * TILE_SIZE;
         const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
         accum_kernel<key_type, value_type, meta_type>
             <<<grid_size, block_size, 0, stream>>>(
                 table_, keys, dst, metas, accum_or_assigns, table_->buckets,
                 table_->buckets_size, table_->bucket_max_size,
                 table_->buckets_num, src_offset, founds, N);
       }
   
       if (!is_fast_mode()) {
         thrust::device_ptr<uintptr_t> dst_ptr(reinterpret_cast<uintptr_t*>(dst));
         thrust::device_ptr<int> src_offset_ptr(src_offset);
   
         thrust::sort_by_key(thrust_par.on(stream), dst_ptr, dst_ptr + n,
                             src_offset_ptr, thrust::less<uintptr_t>());
       }
   
       {
         const size_t block_size = options_.io_block_size;
         const size_t N = n * dim();
         const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
         write_with_accum_kernel<key_type, value_type, meta_type>
             <<<grid_size, block_size, 0, stream>>>(value_or_deltas, dst,
                                                    accum_or_assigns, founds,
                                                    src_offset, dim(), N);
       }
   
       CudaCheckError();
     }
   
     void find(const size_type n, const key_type* keys,  // (n)
               value_type* values,                       // (n, DIM)
               bool* founds,                             // (n)
               meta_type* metas = nullptr,               // (n)
               cudaStream_t stream = 0) const {
       if (n == 0) {
         return;
       }
   
       CUDA_CHECK(cudaMemsetAsync(founds, 0, n * sizeof(bool), stream));
   
       std::shared_lock<std::shared_timed_mutex> lock(mutex_, std::defer_lock);
       if (!reach_max_capacity_) {
         lock.lock();
       }
   
       if (is_fast_mode()) {
         using Selector =
             SelectLookupKernelWithIO<key_type, value_type, meta_type>;
         static thread_local int step_counter = 0;
         static thread_local float load_factor = 0.0;
   
         if (((step_counter++) % kernel_select_interval_) == 0) {
           load_factor = fast_load_factor();
         }
         Selector::execute_kernel(load_factor, options_.block_size, stream, n,
                                  c_table_index_, d_table_, keys, values, metas,
                                  founds);
       } else {
         const size_type dev_ws_size{n * (sizeof(value_type*) + sizeof(int))};
         auto dev_ws{dev_mem_pool_->get_workspace<1>(dev_ws_size, stream)};
         auto src{dev_ws.get<value_type**>(0)};
         auto dst_offset{reinterpret_cast<int*>(src + n)};
   
         CUDA_CHECK(cudaMemsetAsync(src, 0, dev_ws_size, stream));
   
         {
           const size_t block_size = options_.block_size;
           const size_t N = n * TILE_SIZE;
           const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
           lookup_kernel<key_type, value_type, meta_type, TILE_SIZE>
               <<<grid_size, block_size, 0, stream>>>(d_table_, keys, src, metas,
                                                      founds, dst_offset, N);
         }
   
         {
           thrust::device_ptr<uintptr_t> src_ptr(
               reinterpret_cast<uintptr_t*>(src));
           thrust::device_ptr<int> dst_offset_ptr(dst_offset);
   
           thrust::sort_by_key(thrust_par.on(stream), src_ptr, src_ptr + n,
                               dst_offset_ptr, thrust::less<uintptr_t>());
         }
   
         {
           const size_t block_size = options_.io_block_size;
           const size_t N = n * dim();
           const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
           read_kernel<key_type, value_type, meta_type>
               <<<grid_size, block_size, 0, stream>>>(src, values, founds,
                                                      dst_offset, dim(), N);
         }
       }
   
       CudaCheckError();
     }
   
     void erase(const size_type n, const key_type* keys, cudaStream_t stream = 0) {
       if (n == 0) {
         return;
       }
   
       std::unique_lock<std::shared_timed_mutex> lock(mutex_);
   
       {
         const size_t block_size = options_.block_size;
         const size_t N = n * TILE_SIZE;
         const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
         remove_kernel<key_type, value_type, meta_type, TILE_SIZE>
             <<<grid_size, block_size, 0, stream>>>(
                 table_, keys, table_->buckets, table_->buckets_size,
                 table_->bucket_max_size, table_->buckets_num, N);
       }
   
       CudaCheckError();
       return;
     }
   
     size_type erase_if(const Pred& pred, const key_type& pattern,
                        const meta_type& threshold, cudaStream_t stream = 0) {
       std::unique_lock<std::shared_timed_mutex> lock(mutex_);
   
       auto dev_ws{dev_mem_pool_->get_workspace<1>(sizeof(size_type), stream)};
       auto d_count{dev_ws.get<size_type*>(0)};
   
       CUDA_CHECK(cudaMemsetAsync(d_count, 0, sizeof(size_type), stream));
   
       Pred h_pred;
       CUDA_CHECK(cudaMemcpyFromSymbolAsync(&h_pred, pred, sizeof(Pred), 0,
                                            cudaMemcpyDeviceToHost, stream));
   
       {
         const size_t block_size = options_.block_size;
         const size_t N = table_->buckets_num;
         const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
         remove_kernel<key_type, value_type, meta_type>
             <<<grid_size, block_size, 0, stream>>>(
                 table_, h_pred, pattern, threshold, d_count, table_->buckets,
                 table_->buckets_size, table_->bucket_max_size,
                 table_->buckets_num, N);
       }
   
       size_type count = 0;
       CUDA_CHECK(cudaMemcpyAsync(&count, d_count, sizeof(size_type),
                                  cudaMemcpyDeviceToHost, stream));
       CUDA_CHECK(cudaStreamSynchronize(stream));
   
       CudaCheckError();
       return count;
     }
   
     void clear(cudaStream_t stream = 0) {
       std::unique_lock<std::shared_timed_mutex> lock(mutex_, std::defer_lock);
       if (!reach_max_capacity_) {
         lock.lock();
       }
   
       const size_t block_size = options_.block_size;
       const size_t N = table_->buckets_num * table_->bucket_max_size;
       const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
       clear_kernel<key_type, value_type, meta_type>
           <<<grid_size, block_size, 0, stream>>>(table_, N);
   
       CudaCheckError();
     }
   
    public:
     void export_batch(size_type n, const size_type offset,
                       size_type* counter,          // (1)
                       key_type* keys,              // (n)
                       value_type* values,          // (n, DIM)
                       meta_type* metas = nullptr,  // (n)
                       cudaStream_t stream = 0) const {
       std::shared_lock<std::shared_timed_mutex> lock(mutex_, std::defer_lock);
       if (!reach_max_capacity_) {
         lock.lock();
       }
   
       if (offset >= table_->capacity) {
         CUDA_CHECK(cudaMemsetAsync(counter, 0, sizeof(size_type), stream));
         return;
       }
       n = std::min(table_->capacity - offset, n);
   
       const size_t meta_size = metas ? sizeof(meta_type) : 0;
       const size_t kvm_size =
           sizeof(key_type) + sizeof(value_type) * dim() + meta_size;
       const size_t block_size = std::min(shared_mem_size_ / 2 / kvm_size, 1024UL);
       MERLIN_CHECK(
           (block_size > 0),
           "[HierarchicalKV] block_size <= 0, the K-V-M size may be too large!");
   
       const size_t shared_size = kvm_size * block_size;
       const size_t grid_size = SAFE_GET_GRID_SIZE(n, block_size);
   
       dump_kernel<key_type, value_type, meta_type>
           <<<grid_size, block_size, shared_size, stream>>>(
               table_, keys, values, metas, offset, n, counter);
   
       CudaCheckError();
     }
   
     size_type export_batch(const size_type n, const size_type offset,
                            key_type* keys,              // (n)
                            value_type* values,          // (n, DIM)
                            meta_type* metas = nullptr,  // (n)
                            cudaStream_t stream = 0) const {
       auto dev_ws{dev_mem_pool_->get_workspace<1>(sizeof(size_type), stream)};
       auto d_counter{dev_ws.get<size_type*>(0)};
   
       CUDA_CHECK(cudaMemsetAsync(d_counter, 0, sizeof(size_type), stream));
       export_batch(n, offset, d_counter, keys, values, metas, stream);
   
       size_type counter = 0;
       CUDA_CHECK(cudaMemcpyAsync(&counter, d_counter, sizeof(size_type),
                                  cudaMemcpyDeviceToHost, stream));
       CUDA_CHECK(cudaStreamSynchronize(stream));
       return counter;
     }
   
     void export_batch_if(Pred& pred, const key_type& pattern,
                          const meta_type& threshold, size_type n,
                          const size_type offset, size_type* d_counter,
                          key_type* keys,              // (n)
                          value_type* values,          // (n, DIM)
                          meta_type* metas = nullptr,  // (n)
                          cudaStream_t stream = 0) const {
       std::shared_lock<std::shared_timed_mutex> lock(mutex_, std::defer_lock);
       if (!reach_max_capacity_) {
         lock.lock();
       }
   
       if (offset >= table_->capacity) {
         CUDA_CHECK(cudaMemsetAsync(d_counter, 0, sizeof(size_type), stream));
         return;
       }
       n = std::min(table_->capacity - offset, n);
   
       const size_t meta_size = metas ? sizeof(meta_type) : 0;
       const size_t kvm_size =
           sizeof(key_type) + sizeof(value_type) * dim() + meta_size;
       const size_t block_size = std::min(shared_mem_size_ / 2 / kvm_size, 1024UL);
       MERLIN_CHECK(
           block_size > 0,
           "[HierarchicalKV] block_size <= 0, the K-V-M size may be too large!");
   
       const size_t shared_size = kvm_size * block_size;
       const size_t grid_size = SAFE_GET_GRID_SIZE(n, block_size);
   
       Pred h_pred;
       CUDA_CHECK(cudaMemcpyFromSymbolAsync(&h_pred, pred, sizeof(Pred), 0,
                                            cudaMemcpyDeviceToHost, stream));
   
       dump_kernel<key_type, value_type, meta_type>
           <<<grid_size, block_size, shared_size, stream>>>(
               table_, h_pred, pattern, threshold, keys, values, metas, offset, n,
               d_counter);
   
       CudaCheckError();
     }
   
    public:
     bool empty(cudaStream_t stream = 0) const { return size(stream) == 0; }
   
     size_type size(cudaStream_t stream = 0) const {
       std::shared_lock<std::shared_timed_mutex> lock(mutex_, std::defer_lock);
       if (!reach_max_capacity_) {
         lock.lock();
       }
   
       size_type h_size = 0;
   
       const size_type N = table_->buckets_num;
       const size_type step = static_cast<size_type>(
           std::numeric_limits<int>::max() / options_.max_bucket_size);
   
       thrust::device_ptr<int> size_ptr(table_->buckets_size);
   
       for (size_type start_i = 0; start_i < N; start_i += step) {
         size_type end_i = std::min(start_i + step, N);
         h_size += thrust::reduce(thrust_par.on(stream), size_ptr + start_i,
                                  size_ptr + end_i, 0, thrust::plus<int>());
       }
   
       CudaCheckError();
       return h_size;
     }
   
     size_type capacity() const { return table_->capacity; }
   
     void reserve(const size_type new_capacity, cudaStream_t stream = 0) {
       if (reach_max_capacity_ || new_capacity > options_.max_capacity) {
         return;
       }
   
       {
         std::unique_lock<std::shared_timed_mutex> lock(mutex_);
   
         // Once we have exclusive access, make sure that pending GPU calls have
         // been processed.
         CUDA_CHECK(cudaDeviceSynchronize());
   
         while (capacity() < new_capacity &&
                capacity() * 2 <= options_.max_capacity) {
           double_capacity(&table_);
           CUDA_CHECK(cudaDeviceSynchronize());
           sync_table_configuration();
   
           const size_t block_size = options_.block_size;
           const size_t N = TILE_SIZE * table_->buckets_num / 2;
           const size_t grid_size = SAFE_GET_GRID_SIZE(N, block_size);
   
           rehash_kernel_for_fast_mode<key_type, value_type, meta_type, TILE_SIZE>
               <<<grid_size, block_size, 0, stream>>>(d_table_, N);
         }
         CUDA_CHECK(cudaDeviceSynchronize());
         reach_max_capacity_ = (capacity() * 2 > options_.max_capacity);
       }
       CudaCheckError();
     }
   
     float load_factor(cudaStream_t stream = 0) const {
       return static_cast<float>((size(stream) * 1.0) / (capacity() * 1.0));
     }
   
     size_type dim() const noexcept { return options_.dim; }
   
     size_type max_bucket_size() const noexcept {
       return options_.max_bucket_size;
     }
   
     size_type save(BaseKVFile<K, V, M>* file,
                    const size_t max_workspace_size = 1L * 1024 * 1024,
                    cudaStream_t stream = 0) const {
       const size_type tuple_size{sizeof(key_type) + sizeof(meta_type) +
                                  sizeof(value_type) * dim()};
       MERLIN_CHECK(max_workspace_size >= tuple_size,
                    "[HierarchicalKV] max_workspace_size is smaller than a single "
                    "`key + metadata + value` tuple! Please set a larger value!");
   
       const size_type block_size{
           std::min(shared_mem_size_ / 2 / tuple_size, UINT64_C(1024))};
       MERLIN_CHECK(
           (block_size > 0),
           "[HierarchicalKV] block_size <= 0, the K-V-M size may be too large!");
   
       // Request exclusive access (to make sure capacity won't change anymore).
       std::unique_lock<std::shared_timed_mutex> lock(mutex_);
   
       const size_type total_size{capacity()};
       const size_type n{std::min(max_workspace_size / tuple_size, total_size)};
       const size_type shared_size{tuple_size * block_size};
       const size_type grid_size{SAFE_GET_GRID_SIZE(n, block_size)};
   
       // Grab temporary device and host memory.
       const size_type host_ws_size{n * tuple_size};
       auto host_ws{host_mem_pool_->get_workspace<1>(host_ws_size, stream)};
       auto h_keys{host_ws.get<key_type*>(0)};
       auto h_metas{reinterpret_cast<meta_type*>(h_keys + n)};
       auto h_values{reinterpret_cast<value_type*>(h_metas + n)};
   
       const size_type dev_ws_size{sizeof(size_type) + host_ws_size};
       auto dev_ws{dev_mem_pool_->get_workspace<1>(dev_ws_size, stream)};
       auto d_count{dev_ws.get<size_type*>(0)};
       auto d_keys{reinterpret_cast<key_type*>(d_count + 1)};
       auto d_metas{reinterpret_cast<meta_type*>(d_keys + n)};
       auto d_values{reinterpret_cast<value_type*>(d_metas + n)};
   
       // Step through table, dumping contents in batches.
       size_type total_count{0};
       for (size_type i{0}; i < total_size; i += n) {
         // Dump the next batch to workspace, and then write it to the file.
         CUDA_CHECK(cudaMemsetAsync(d_count, 0, sizeof(size_type), stream));
   
         dump_kernel<key_type, value_type, meta_type>
             <<<grid_size, block_size, shared_size, stream>>>(
                 table_, d_keys, d_values, d_metas, i, std::min(total_size - i, n),
                 d_count);
   
         size_type count;
         CUDA_CHECK(cudaMemcpyAsync(&count, d_count, sizeof(size_type),
                                    cudaMemcpyDeviceToHost, stream));
         CUDA_CHECK(cudaStreamSynchronize(stream));
   
         if (count == n) {
           CUDA_CHECK(cudaMemcpyAsync(h_keys, d_keys, host_ws_size,
                                      cudaMemcpyDeviceToHost, stream));
         } else {
           CUDA_CHECK(cudaMemcpyAsync(h_keys, d_keys, sizeof(key_type) * count,
                                      cudaMemcpyDeviceToHost, stream));
           CUDA_CHECK(cudaMemcpyAsync(h_metas, d_metas, sizeof(meta_type) * count,
                                      cudaMemcpyDeviceToHost, stream));
           CUDA_CHECK(cudaMemcpyAsync(h_values, d_values,
                                      sizeof(value_type) * dim() * count,
                                      cudaMemcpyDeviceToHost, stream));
         }
   
         CUDA_CHECK(cudaStreamSynchronize(stream));
         file->write(count, dim(), h_keys, h_values, h_metas);
         total_count += count;
       }
   
       return total_count;
     }
   
     size_type load(BaseKVFile<K, V, M>* file,
                    const size_t max_workspace_size = 1L * 1024 * 1024,
                    cudaStream_t stream = 0) {
       const size_type tuple_size{sizeof(key_type) + sizeof(meta_type) +
                                  sizeof(value_type) * dim()};
       MERLIN_CHECK(max_workspace_size >= tuple_size,
                    "[HierarchicalKV] max_workspace_size is smaller than a single "
                    "`key + metadata + value` tuple! Please set a larger value!");
   
       const size_type n{max_workspace_size / tuple_size};
       const size_type ws_size{n * tuple_size};
   
       // Grab enough host memory to hold batch data.
       auto host_ws{host_mem_pool_->get_workspace<1>(ws_size, stream)};
       auto h_keys{host_ws.get<key_type*>(0)};
       auto h_metas{reinterpret_cast<meta_type*>(h_keys + n)};
       auto h_values{reinterpret_cast<value_type*>(h_metas + n)};
   
       // Attempt a first read.
       size_type count{file->read(n, dim(), h_keys, h_values, h_metas)};
       if (count == 0) {
         return 0;
       }
   
       // Grab equal amount of device memory as temporary storage.
       auto dev_ws{dev_mem_pool_->get_workspace<1>(ws_size, stream)};
       auto d_keys{dev_ws.get<key_type*>(0)};
       auto d_metas{reinterpret_cast<meta_type*>(d_keys + n)};
       auto d_values{reinterpret_cast<value_type*>(d_metas + n)};
   
       size_type total_count{0};
       do {
         if (count == n) {
           CUDA_CHECK(cudaMemcpyAsync(d_keys, h_keys, ws_size,
                                      cudaMemcpyHostToDevice, stream));
         } else {
           CUDA_CHECK(cudaMemcpyAsync(d_keys, h_keys, sizeof(key_type) * count,
                                      cudaMemcpyHostToDevice, stream));
           CUDA_CHECK(cudaMemcpyAsync(d_metas, h_metas, sizeof(meta_type) * count,
                                      cudaMemcpyHostToDevice, stream));
           CUDA_CHECK(cudaMemcpyAsync(d_values, h_values,
                                      sizeof(value_type) * dim() * count,
                                      cudaMemcpyHostToDevice, stream));
         }
   
         insert_or_assign(count, d_keys, d_values, d_metas, stream, true);
         total_count += count;
   
         // Read next batch.
         CUDA_CHECK(cudaStreamSynchronize(stream));
         count = file->read(n, dim(), h_keys, h_values, h_metas);
       } while (count > 0);
   
       return total_count;
     }
   
    private:
     inline bool is_fast_mode() const noexcept { return table_->is_pure_hbm; }
   
     inline float fast_load_factor(const size_type delta = 0,
                                   cudaStream_t stream = 0) const {
       std::shared_lock<std::shared_timed_mutex> lock(mutex_, std::defer_lock);
       if (!reach_max_capacity_) {
         lock.lock();
       }
       size_t N = std::min(table_->buckets_num, 1024UL);
   
       thrust::device_ptr<int> size_ptr(table_->buckets_size);
   
       int size = thrust::reduce(thrust_par.on(stream), size_ptr, size_ptr + N, 0,
                                 thrust::plus<int>());
   
       CudaCheckError();
       return static_cast<float>((delta * 1.0) / (capacity() * 1.0) +
                                 (size * 1.0) /
                                     (options_.max_bucket_size * N * 1.0));
     }
   
     inline void check_evict_strategy(const meta_type* metas) {
       if (options_.evict_strategy == EvictStrategy::kLru) {
         MERLIN_CHECK(metas == nullptr,
                      "the metas should not be specified when running on "
                      "LRU mode.");
       }
   
       if (options_.evict_strategy == EvictStrategy::kCustomized) {
         MERLIN_CHECK(metas != nullptr,
                      "the metas should be specified when running on "
                      "customized mode.");
       }
     }
   
     inline void sync_table_configuration() {
       CUDA_CHECK(
           cudaMemcpy(d_table_, table_, sizeof(TableCore), cudaMemcpyDefault));
       if (c_table_index_ >= 0) {
         CUDA_CHECK(cudaMemcpyToSymbol(c_table_, table_, sizeof(TableCore),
                                       sizeof(TableCore) * c_table_index_,
                                       cudaMemcpyDefault));
       }
     }
   
    private:
     HashTableOptions options_;
     TableCore* table_ = nullptr;
     TableCore* d_table_ = nullptr;
     size_t shared_mem_size_ = 0;
     std::atomic_bool reach_max_capacity_{false};
     bool initialized_ = false;
     mutable std::shared_timed_mutex mutex_;
     const unsigned int kernel_select_interval_ = 7;
     int c_table_index_ = -1;
     std::unique_ptr<DeviceMemoryPool> dev_mem_pool_;
     std::unique_ptr<HostMemoryPool> host_mem_pool_;
   };
   
   }  // namespace merlin
   }  // namespace nv
